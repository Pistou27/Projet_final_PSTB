"""
Classe de base abstraite pour les gestionnaires LLM
"""

import json
from abc import ABC, abstractmethod
from typing import Dict, Any

from .utils import Logger

class BaseLLMManager(ABC):
    """Classe de base abstraite pour tous les gestionnaires LLM"""
    
    def __init__(self, model_name: str):
        """
        Initialise le gestionnaire LLM
        
        Args:
            model_name: Nom du mod√®le √† utiliser
        """
        self.model_name = model_name
        self.client = None
        self.available = False
        self._check_availability()
    
    @abstractmethod
    def _check_availability(self):
        """V√©rifie la disponibilit√© du service LLM - √Ä impl√©menter par les sous-classes"""
        pass
    
    @abstractmethod
    def _generate_raw_response(self, prompt: str, temperature: float) -> str:
        """G√©n√®re une r√©ponse brute - √Ä impl√©menter par les sous-classes"""
        pass
    
    def generate_response(self, prompt: str, temperature: float = 0.2) -> Dict[str, Any]:
        """G√©n√®re une r√©ponse avec le LLM au format JSON strict"""
        
        if not self.available:
            return {
                "answer": f"{self.__class__.__name__} non disponible",
                "citations": [],
                "claims": [],
                "error": f"{self.__class__.__name__} non configur√©"
            }
        
        try:
            # Prompt enrichi pour forcer le format JSON
            structured_prompt = self._build_structured_prompt(prompt)
            
            # G√©n√©ration avec le LLM sp√©cifique
            raw_response = self._generate_raw_response(structured_prompt, temperature)
            
            Logger.info(f"üîç R√©ponse brute {self.__class__.__name__}: {raw_response[:200]}...")
            
            # Nettoyer et valider le JSON
            return self._parse_and_validate_response(raw_response)
                
        except Exception as e:
            Logger.error(f"Erreur g√©n√©ration {self.__class__.__name__}: {e}")
            return {
                "answer": f"Erreur lors de la g√©n√©ration avec {self.__class__.__name__}: {str(e)}",
                "citations": [],
                "claims": [],
                "error": str(e)
            }
    
    def _build_structured_prompt(self, prompt: str) -> str:
        """Construit le prompt structur√© pour forcer le format JSON"""
        return f"""{prompt}

IMPORTANT: Tu DOIS r√©pondre UNIQUEMENT au format JSON suivant, sans aucun autre texte.

R√àGLES POUR LES CITATIONS ET R√âPONSES :
- Si tu peux r√©pondre √† la question avec les documents fournis, inclus les citations des pages pertinentes
- Si tu ne peux PAS r√©pondre √† la question car l'information n'est pas dans les documents, laisse le tableau "citations" VIDE []
- Si tu dis qu'il n'y a pas d'information, d'indication, ou que quelque chose n'est pas mentionn√©, tu NE DOIS PAS inclure de citations

R√àGLES POUR LE STYLE DE R√âPONSE :
- Si tu as des citations √† inclure (c'est-√†-dire si tu peux r√©pondre avec les documents), commence TOUJOURS ta r√©ponse par "C'est tr√®s simple, "
- Si tu n'as pas de citations (pas d'information trouv√©e), ne commence PAS par "C'est tr√®s simple"
- Structure ta r√©ponse sur plusieurs lignes pour une meilleure lisibilit√©
- Utilise des sauts de ligne (<br>) pour s√©parer les diff√©rentes parties de ta r√©ponse
- Organise les informations par points ou paragraphes quand c'est appropri√©
- Mets un <br> apr√®s "C'est tr√®s simple," pour commencer sur une nouvelle ligne

Format JSON requis :
{{
  "answer": "C'est tr√®s simple,<br><br>ta r√©ponse d√©taill√©e en fran√ßais ici<br><br>avec des sauts de ligne<br>pour une meilleure structure",
  "citations": [
    {{"doc_id": "nom_du_document", "page": "num√©ro_de_page"}}
  ],
  "claims": [
    {{
      "text": "affirmation_pr√©cise_extraite_de_la_r√©ponse",
      "citations": [
        {{"doc_id": "nom_du_document", "page": "num√©ro_de_page"}}
      ]
    }}
  ]
}}

R√©ponse JSON:"""
    
    def _parse_and_validate_response(self, raw_response: str) -> Dict[str, Any]:
        """Parse et valide la r√©ponse JSON"""
        try:
            # Enlever les blocs de code markdown si pr√©sents
            cleaned_response = raw_response
            if '```' in cleaned_response:
                # Extraire le contenu entre les blocs de code
                lines = cleaned_response.split('\n')
                json_lines = []
                in_json_block = False
                
                for line in lines:
                    if line.startswith('```'):
                        in_json_block = not in_json_block
                        continue
                    if in_json_block or ('{' in line or '}' in line or '"' in line):
                        json_lines.append(line)
                
                cleaned_response = '\n'.join(json_lines).strip()
            
            # Nettoyer les espaces et caract√®res parasites
            cleaned_response = cleaned_response.strip()
            
            # Essayer de trouver le JSON s'il y a du texte avant/apr√®s
            start_idx = cleaned_response.find('{')
            end_idx = cleaned_response.rfind('}')
            if start_idx != -1 and end_idx != -1 and end_idx > start_idx:
                cleaned_response = cleaned_response[start_idx:end_idx + 1]
            
            Logger.info(f"üßπ JSON nettoy√©: {cleaned_response[:100]}...")
            
            # Parser le JSON
            parsed_response = json.loads(cleaned_response)
            
            # Valider la structure
            required_keys = ["answer", "citations", "claims"]
            if all(key in parsed_response for key in required_keys):
                # V√©rifier si la r√©ponse indique une absence d'information
                answer = parsed_response.get("answer", "").lower()
                
                # Mots-cl√©s indiquant une absence d'information
                no_info_phrases = [
                    "il n'y a pas d'information",
                    "aucune information",
                    "pas d'information sur",
                    "ne contient pas d'information",
                    "n'est pas mentionn√©",
                    "pas de mention",
                    "contexte ne contient pas",
                    "documents ne contiennent pas",
                    "je ne trouve pas d'information",
                    "il n'existe pas d'indication",
                    "aucune indication",
                    "pas d'indication sur",
                    "ne pr√©sente pas d'information",
                    "n'indique pas",
                    "pas pr√©cis√©",
                    "non mentionn√©",
                    "absent des documents"
                ]
                
                # Si la r√©ponse indique une absence d'information, vider les citations
                if any(phrase in answer for phrase in no_info_phrases):
                    parsed_response["citations"] = []
                    parsed_response["claims"] = []
                    Logger.info("üö´ Absence d'information d√©tect√©e - citations supprim√©es")
                
                return parsed_response
            else:
                raise ValueError("Structure JSON invalide")
                
        except (json.JSONDecodeError, ValueError) as e:
            Logger.warning(f"R√©ponse JSON invalide, reformatage: {e}")
            # Fallback vers structure JSON basique
            clean_text = raw_response.replace('\n', ' ').strip()
            return {
                "answer": clean_text,
                "citations": [],
                "claims": [{"text": clean_text, "citations": []}]
            }
    
    def is_available(self) -> bool:
        """V√©rifie si le LLM est disponible"""
        return self.available
